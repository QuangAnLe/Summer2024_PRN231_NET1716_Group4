@page
@model ClientMilkTeamPage.Pages.Cart.IndexModel
@{
	ViewData["Title"] = "Cart";
}
@{
	var token = Request.Cookies["UserCookie"];
}

@{
	Layout = null;
}

<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="author" content="Untree.co">
	<link rel="shortcut icon" href="favicon.png">

	<meta name="description" content="" />
	<meta name="keywords" content="bootstrap, bootstrap4" />

	<!-- Bootstrap CSS -->
	<link href="css2/bootstrap.min.css" rel="stylesheet">
	<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
	<link href="css2/tiny-slider.css" rel="stylesheet">
	<link href="css2/style.css" rel="stylesheet">
	<title>Furni Free Bootstrap 5 Template for Furniture and Interior Design Websites by Untree.co </title>
</head>

<body>

	<!-- Start Header/Navigation -->
	<nav class="custom-navbar navbar navbar navbar-expand-md navbar-dark bg-dark" arial-label="Furni navigation bar">

		<div class="container">
			<a class="navbar-brand" href="index.html">Milk Tea Delivery<span>.</span></a>

			<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsFurni" aria-controls="navbarsFurni" aria-expanded="false" aria-label="Toggle navigation">
				<span class="navbar-toggler-icon"></span>
			</button>

			<div class="collapse navbar-collapse" id="navbarsFurni">
				<ul class="custom-navbar-nav navbar-nav ms-auto mb-2 mb-md-0">
					<li class="nav-item active">
						<a class="nav-link" asp-page="/HomePage">Home</a>
					</li>
					@if (!string.IsNullOrEmpty(token))
					{
						<li><a class="nav-link" asp-page="/UserProfile">Profile</a></li>
						<li><a class="nav-link" asp-page="/Cart/Index">Cart</a></li>
						<li><a class="nav-link" asp-page="/UserPage/OrderHistory">Order History</a></li>
					}
				</ul>
			</div>
			<!-- login Log out -->
			<div class="header-action">
				@if (string.IsNullOrEmpty(token))
				{
					<button class="btn btn-primary" onclick="window.location.href='./Login'">
						<span>Đăng nhập</span>
						<ion-icon name="log-in-outline"></ion-icon>
					</button>
				}
				else
				{
					<button class="btn btn-primary" onclick="window.location.href='./Logout'">
						<span>Logout</span>
						<ion-icon name="log-in-outline"></ion-icon>
					</button>
				}


			</div>

		</div>
	</nav>
	<div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 1200px; margin: 0 auto; padding: 20px; background-color: #f4f4f4;">
		<h2 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">Your Cart</h2>

		@if (!Model.IsAuthenticated)
		{
			<div style="background-color: #e74c3c; color: #fff; padding: 20px; text-align: center; margin-bottom: 20px; border-radius: 5px;">
				<p style="margin-bottom: 10px;">You are not logged in. Please log in to view your cart.</p>
				<a href="/Login" style="display: inline-block; background-color: #3498db; color: #fff; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Go to Login</a>
			</div>
		}
		else if (Model.IsCartEmpty)
		{
			<div style="background-color: #f39c12; color: #fff; padding: 20px; text-align: center; margin-bottom: 20px; border-radius: 5px;">
				<p style="margin-bottom: 10px;">Your cart is empty. Please add some items before checking out.</p>
				<a href="/" style="display: inline-block; background-color: #3498db; color: #fff; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Go to Home</a>
			</div>
		}
		else
		{
			<table style="width: 100%; border-collapse: collapse; margin-bottom: 30px; background-color: #fff; box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);">
				<tr>
					<th style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd; background-color: #3498db; color: #fff; font-weight: bold;">Tea Name</th>
					<th style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd; background-color: #3498db; color: #fff; font-weight: bold;">Price</th>
					<th style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd; background-color: #3498db; color: #fff; font-weight: bold;">Quantity</th>
					<th style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd; background-color: #3498db; color: #fff; font-weight: bold;">Additional Materials</th>
					<th style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd; background-color: #3498db; color: #fff; font-weight: bold;">Total Price</th>
					<th style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd; background-color: #3498db; color: #fff; font-weight: bold;">Action</th>
				</tr>
				@for (int i = 0; i < Model.CartItems.Count; i++)
				{
					var item = Model.CartItems[i];
					<tr style="transition: background-color 0.3s;">
						<td style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd;">@item.TeaName</td>
						<td style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd;">@item.Price</td>
						<td style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd;">
							<div class="quantity-control" style="display: flex; align-items: center; background-color: #fff; border-radius: 20px; overflow: hidden; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
								<button type="button" class="quantity-btn" data-action="decrease" data-tea-id="@item.TeaID" style="width: 30px; height: 30px; border: none; background-color: #e9ecef; color: #495057; font-size: 18px; cursor: pointer; transition: background-color 0.3s;">-</button>
								<input type="number"
									   class="quantity-input"
									   id="teaQuantity-@item.TeaID"
									   name="TeaQuantity[@item.TeaID]"
									   value="@item.Quantity"
									   min="1"
									   max="@item.MaxQuantity"
									   data-tea-id="@item.TeaID"
									   style="width: 40px; text-align: center; border: none; font-size: 16px; -moz-appearance: textfield;" />
								<button type="button" class="quantity-btn" data-action="increase" data-tea-id="@item.TeaID" style="width: 30px; height: 30px; border: none; background-color: #e9ecef; color: #495057; font-size: 18px; cursor: pointer; transition: background-color 0.3s;">+</button>
							</div>
						</td>
						<td style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd;">
							@{
								var materialCounter = 0;
							}
							@foreach (var material in Model.Materials)
							{
								var uniqueId = $"{item.TeaID}-{materialCounter}";
								<div class="material-item" style="display: flex; align-items: center; margin-bottom: 10px; background-color: #f8f9fa; padding: 8px; border-radius: 5px;">
									<span style="flex-grow: 1; font-weight: 500;">@material.MaterialName - $@material.Price</span>
									<div class="quantity-control" style="display: flex; align-items: center; background-color: #fff; border-radius: 20px; overflow: hidden; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
										<button type="button" class="quantity-btn" data-action="decrease" data-unique-id="@uniqueId" style="width: 30px; height: 30px; border: none; background-color: #e9ecef; color: #495057; font-size: 18px; cursor: pointer; transition: background-color 0.3s;">-</button>
										<input type="number"
											   class="quantity-input"
											   id="materialQuantity-@uniqueId"
											   name="MaterialQuantity[@item.TeaID][@material.MaterialID]"
											   value="@(item.SelectedMaterials.FirstOrDefault(sm => sm.MaterialID == material.MaterialID)?.Quantity ?? 0)"
											   min="0"
											   max="@material.Quantity"
											   data-tea-id="@item.TeaID"
											   data-material-id="@material.MaterialID"
											   data-material-name="@material.MaterialName"
											   data-material-price="@material.Price"
											   style="width: 40px; text-align: center; border: none; font-size: 16px; -moz-appearance: textfield;" />
										<button type="button" class="quantity-btn" data-action="increase" data-unique-id="@uniqueId" style="width: 30px; height: 30px; border: none; background-color: #e9ecef; color: #495057; font-size: 18px; cursor: pointer; transition: background-color 0.3s;">+</button>
									</div>
								</div>
								materialCounter++;
							}
						</td>
						<td style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd;" id="totalPrice-@item.TeaID">@item.TotalPrice</td>
						<td style="padding: 15px; text-align: left; border-bottom: 1px solid #ddd;">
							<a href="/Cart/Delete?teaID=@item.TeaID" style="color: #e74c3c; text-decoration: none;">Delete</a>
						</td>
					</tr>
				}
			</table>
			<p style="font-weight: bold; color: #2c3e50;" id="cartTotal">Total: @Model.CartItems.Sum(item => item.TotalPrice)</p>

			<form action="/Cart/SubmitOrder" method="get" style="background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); margin-top: 30px;">
				<h1 style="color: #2c3e50; text-align: center; margin-bottom: 20px;">Checkout</h1>

				@if (Model.CurrentUser != null)
				{
					<div style="margin-bottom: 20px;">
						<p><strong>User Name:</strong> @Model.CurrentUser.UserName</p>
						<p><strong>Mobile Number:</strong> @Model.CurrentUser.Phone</p>
					</div>
				}

				<label for="shipper" style="display: none">Select Shipper:</label>
				<select name="ShipperID" id="shipper" required style="display: none">
					@foreach (var shipper in Model.Shippers)
					{
						<option value="@shipper.UserID">@shipper.FullName</option>
					}
				</select>

				<label style="display: block; margin-bottom: 5px; font-weight: bold;">Note:</label>
				<input type="text" name="content" style="width: 100%; padding: 10px; margin-bottom: 20px; border: 1px solid #ddd; border-radius: 4px;" />

				<label style="display: block; margin-bottom: 5px; font-weight: bold;">Address:</label>
				<input type="text" name="address" value="@(Model.CurrentUser?.UserAddress ?? "")" style="width: 100%; padding: 10px; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 4px;" />

				<label style="display: block; margin-bottom: 5px; font-weight: bold;">District:</label>
				<input type="text" name="district" value="@(Model.CurrentUser?.DistrictName ?? "")" style="width: 100%; padding: 10px; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 4px;" />

				<label style="display: block; margin-bottom: 5px; font-weight: bold;">Ward:</label>
				<input type="text" name="ward" value="@(Model.CurrentUser?.WardName ?? "")" style="width: 100%; padding: 10px; margin-bottom: 20px; border: 1px solid #ddd; border-radius: 4px;" />

				<p style="font-weight: bold; color: #2c3e50;">@ViewData["Message"]</p>
				<button type="submit" style="background-color: #2ecc71; color: #fff; padding: 10px 20px; border: none; cursor: pointer; font-size: 16px; transition: background-color 0.3s;">Checkout</button>
			</form>
		}
	</div>
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			// Attach event listeners to all quantity buttons
			document.querySelectorAll('.quantity-btn').forEach(button => {
				button.addEventListener('click', function () {
					const uniqueId = this.getAttribute('data-unique-id');
					const action = this.getAttribute('data-action');
					changeQuantity(uniqueId, action === 'increase' ? 1 : -1);
				});
			});

			// Attach event listeners to all quantity inputs
			document.querySelectorAll('.quantity-input').forEach(input => {
				input.addEventListener('change', function () {
					updateCart(this.id.split('-')[1]);
				});
			});

			// Add event listeners for tea quantity buttons
			document.querySelectorAll('.quantity-btn[data-tea-id]').forEach(button => {
				button.addEventListener('click', function () {
					const teaId = this.getAttribute('data-tea-id');
					const action = this.getAttribute('data-action');
					changeTeaQuantity(teaId, action === 'increase' ? 1 : -1);
				});
			});

			// Add event listeners for tea quantity inputs
			document.querySelectorAll('.quantity-input[data-tea-id]').forEach(input => {
				input.addEventListener('change', function () {
					updateTeaQuantity(this.getAttribute('data-tea-id'));
				});
			});
			document.querySelectorAll('.quantity-input').forEach(input => {
				input.addEventListener('input', function () {
					validateInput(this);
				});
			});

		});

		function validateInput(input) {
			const value = parseInt(input.value);
			const min = parseInt(input.min);
			const max = parseInt(input.max);

			if (isNaN(value) || value < min) {
				alert(`Quantity must be at least ${min}.`);
				input.value = min;
			} else if (value > max) {
				alert(`Quantity cannot exceed ${max}.`);
				input.value = max;
			}
		}

		function changeQuantity(uniqueId, change) {
			const input = document.getElementById(`materialQuantity-${uniqueId}`);
			const currentValue = parseInt(input.value) || 0;
			const newValue = currentValue + change;
			const minQuantity = parseInt(input.min);
			const maxQuantity = parseInt(input.max);

			if (newValue < minQuantity) {
				alert(`Quantity cannot be less than ${minQuantity}.`);
				input.value = minQuantity;
			} else if (newValue > maxQuantity) {
				alert(`Maximum quantity allowed is ${maxQuantity}.`);
				input.value = maxQuantity;
			} else {
				input.value = newValue;
			}
			updateCart(uniqueId);
		}

		function updateCart(uniqueId) {
			const input = document.getElementById(`materialQuantity-${uniqueId}`);
			const teaId = input.getAttribute('data-tea-id');
			const materialId = input.getAttribute('data-material-id');
			const materialName = input.getAttribute('data-material-name');
			const materialPrice = parseFloat(input.getAttribute('data-material-price'));
			const quantity = parseInt(input.value);


			if (quantity < 1) {
				alert(`Quantity cannot be less than 1.`);
				return;
			}

			fetch('/api/Cart/UpdateMaterial', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					teaId: teaId,
					materialId: materialId,
					materialName: materialName,
					materialPrice: materialPrice,
					quantity: quantity
				})
			})
				.then(response => response.json())
				.then(data => {
					document.getElementById('totalPrice-' + teaId).textContent = data.itemTotal.toFixed(2);
					document.getElementById('cartTotal').textContent = 'Total: ' + data.cartTotal.toFixed(2);
				});
		}

		function changeTeaQuantity(teaId, change) {
			const input = document.getElementById(`teaQuantity-${teaId}`);
			const currentValue = parseInt(input.value) || 0;
			const newValue = currentValue + change;
			const minQuantity = parseInt(input.min);
			const maxQuantity = parseInt(input.max);

			if (newValue < minQuantity) {
				alert(`Quantity cannot be less than ${minQuantity}.`);
				input.value = minQuantity;
			} else if (newValue > maxQuantity) {
				alert(`Maximum quantity allowed is ${maxQuantity}.`);
				input.value = maxQuantity;
			} else {
				input.value = newValue;
			}
			updateTeaQuantity(teaId);
		}


		function updateTeaQuantity(teaId) {
			const input = document.getElementById(`teaQuantity-${teaId}`);
			let quantity = parseInt(input.value) || 0;
			const maxQuantity = parseInt(input.max);

			if (quantity < 1) {
				quantity = 1;
			} else if (quantity > maxQuantity) {
				quantity = maxQuantity;
			}
			input.value = quantity;

			fetch('/api/Cart/UpdateTeaQuantity', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					teaId: teaId,
					quantity: quantity
				})
			})
				.then(response => response.json())
				.then(data => {
					document.getElementById('totalPrice-' + teaId).textContent = data.itemTotal.toFixed(2);
					document.getElementById('cartTotal').textContent = 'Total: ' + data.cartTotal.toFixed(2);
				});
		}

		document.querySelector('form').addEventListener('submit', function (e) {
			const teaInputs = document.querySelectorAll('.quantity-input[data-tea-id]');
			const materialInputs = document.querySelectorAll('.quantity-input[data-material-id]');
			let isValid = true;

			teaInputs.forEach(input => {
				const quantity = parseInt(input.value);
				const min = parseInt(input.min);
				const max = parseInt(input.max);
				if (isNaN(quantity) || quantity < min || quantity > max) {
					alert(`Tea quantity must be between ${min} and ${max}`);
					isValid = false;
				}
			});

			materialInputs.forEach(input => {
				const quantity = parseInt(input.value);
				const min = parseInt(input.min);
				const max = parseInt(input.max);
				if (isNaN(quantity) || quantity < min || quantity > max) {
					alert(`Material quantity must be between ${min} and ${max}`);
					isValid = false;
				}
			});

			if (!isValid) {
				e.preventDefault();
			}
		});
	</script>
</body>

</html>